{"version":3,"sources":["components/Categories.js","components/NewsItem.js","components/NewsList.js","lib/usePromise.js","pages/NewsPage.js","App.js","reportWebVitals.js","index.js"],"names":["categories","name","text","CategoriesBlock","styled","div","Category","NavLink","Categories","map","c","activeClassName","exact","to","NewsItemBlock","NewsItem","article","title","urlToImage","url","description","className","href","target","rel","src","alt","NewsListBlock","NewsList","category","promiseCreator","deps","useState","loading","setLoading","resolved","setResolved","error","setError","useEffect","a","process","usePromise","query","axios","get","response","articles","data","NewsPage","match","params","App","basename","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.149bd5bc.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst categories = [\n  {\n    name: \"all\",\n    text: \"전체보기\",\n  },\n  {\n    name: \"business\",\n    text: \"비즈니스\",\n  },\n  {\n    name: \"entertainment\",\n    text: \"엔터테인먼트\",\n  },\n  {\n    name: \"health\",\n    text: \"건강\",\n  },\n  {\n    name: \"science\",\n    text: \"과학\",\n  },\n  {\n    name: \"sports\",\n    text: \"스포츠\",\n  },\n  {\n    name: \"technology\",\n    text: \"기술\",\n  },\n];\n\nconst CategoriesBlock = styled.div`\n  display: flex;\n  padding: 1rem;\n  width: 768px;\n  margin: 0 auto;\n  @media screen and (max-width: 768px) {\n    width: 100%;\n    overflow-x: auto;\n  }\n`;\n\nconst Category = styled(NavLink)`\n  font-size: 1.125rem;\n  cursor: pointer;\n  white-space: pre;\n  text-decoration: none;\n  color: inherit;\n  padding-bottom: 0.25rem;\n\n  &:hover {\n    color: #495057;\n  }\n\n  &.active {\n    font-weight: 600;\n    border-bottom: 2px solid #22b8cf;\n    color: #22b8cf;\n    &:hover {\n      color: #3bc9db;\n    }\n  }\n\n  & + & {\n    margin-left: 1rem;\n  }\n`;\n\nconst Categories = () => {\n  return (\n    <>\n      {/*\n      카테고리를 선택하고, 선택된 카테고리에 다른 스타일을 주는 기능을 NavLink를 사용\n\n      NavLink로 만들어진 Category 컴포넌트에 to 값은 \"/카테고리이름\" 으로 설정.\n      카테고리 중에서 전체보기의 경우는 예외적으로 \"/all\" 대신에 \"/\"로 설정.\n      to값이 \"/\"로 가리키고 있을 때는 exact 값을 true로 해 주어야 한다.\n      이 값을 설정하지 않으면, 다릌 카테고리가 선택되었을 때도 전체보기 링크에 active 스타일이 적용되는 오류가 발생.\n    */}\n      <CategoriesBlock>\n        {categories.map(c => (\n          <Category\n            key={c.name}\n            activeClassName=\"active\"\n            exact={c.name === \"all\"}\n            to={c.name === \"all\" ? \"/\" : `/${c.name}`}\n          >\n            {c.text}\n          </Category>\n        ))}\n      </CategoriesBlock>\n    </>\n  );\n};\n\nexport default Categories;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst NewsItemBlock = styled.div`\n  display: flex;\n  a {\n    color: black;\n    text-decoration: none;\n  }\n\n  .thumbnail {\n    margin-right: 1rem;\n    img {\n      display: block;\n      width: 160px;\n      height: 100px;\n      object-fit: cover;\n    }\n  }\n  .contents {\n    h2 {\n      margin: 0;\n    }\n    p {\n      margin: 0;\n      line-height: 1.5;\n      margin-top: 0.5rem;\n      white-space: normal;\n    }\n  }\n  &:hover a {\n    text-decoration: underline;\n  }\n  & + & {\n    margin-top: 3rem;\n  }\n`;\nconst NewsItem = ({ article }) => {\n  const { title, urlToImage, url, description } = article;\n  return (\n    <NewsItemBlock>\n      {urlToImage && (\n        <div className=\"thumbnail\">\n          <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n            <img src={urlToImage} alt=\"thumbnail\" />\n          </a>\n        </div>\n      )}\n      <div className=\"contents\">\n        <h2>\n          <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n            {title}\n          </a>\n        </h2>\n        <p>{description}</p>\n      </div>\n    </NewsItemBlock>\n  );\n};\n\nexport default NewsItem;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport axios from \"axios\";\n\nimport NewsItem from \"./NewsItem\";\nimport usePromise from \"../lib/usePromise\";\n\nconst NewsListBlock = styled.div`\n  box-sizing: border-box;\n  padding-bottom: 3rem;\n  width: 768px;\n  margin: 0 auto;\n  margin-top: 2rem;\n  @media screen and (max-width: 768px) {\n    width: 10%;\n    padding-left: 1rem;\n    padding-right: 1rem;\n  }\n`;\n\nconst NewsList = ({ category }) => {\n  // 현재 props로 받아 온 category에 따라 카테고리를 지정하여 API를 요청\n  /*\n        화면에 보이는 시점에 API를 요청했다. 이떄 useEffect를 사용하여 컴포넌트가 처음 렌더링되는 시점에 API를 요청.\n        여기서 주의할 점은 useEffect에 등록하는 함수에 async를 붙이면 안된다.\n        useEffect에서 반환해야 하는 값은 뒷정리 함수이기 떄문이다.\n        따라서 useEffect 내부에서 async/await를 사용하고 싶다면, 함수 내부에 async 키워드가 붙은 또 다른 함수를 만들어서 사용해야 한다.\n    */\n  // const [articles, setArticles] = useState(null);\n  // const [loading, setLoading] = useState(false); // loading이라는 상태도 관리하여 API 요청이 대기 중인지 판별\n\n  // useEffect(() => {\n  //   // async를 사용하는 함수 따로 선언\n  //   const fetchData = async () => {\n  //     setLoading(true);\n  //     try {\n  //       const query = category === \"all\" ? \"\" : `&category=${category}`;\n  //       const response = await axios.get(\n  //         // axios.get 함수는 파라미터로 전달된 주소에 GET요청을 해준다. 그리고 이에 대한 결과는 .then을 통해 비동기적으로 확인할 수 있다.\n  //         `http://newsapi.org/v2/top-headlines?country=kr${query}&apiKey=f6e5e57285ad4b20aa02fdfe2d8b2905`\n  //       );\n  //       /*\n  //         현재 category 값이 무엇인지에 따라 요청할 주소가 동적으로 바뀌고 있다.\n  //         category 값이 all이라면 query값을 공백으로 설정하고, all이 아니라면 \"&category=카테고리\" 형태의 문자열을 만들도록 했다. 그리고 이 query에를 요청할 때 주소에 포함시켜주었다.\n  //         추가로 category 값이 바뀔 때마다 뉴스를 새로 불러와야 하기 떄문에 useEffect의 의존 배열 (두 번쨰 파라미터로 설정하는 배열)에 category를 넣어 주어야 한다.\n\n  //         만약 이 컴포넌트를 클래스형 컴포넌트로 만들게 된다면 componentDidMount와 componentDidUpdata에서 요청을 시작하도록 설정해 주어야한다.\n  //         함수형 컴포넌트라면 이렇게 useEffect 한 번을 컴포넌트가 맨 처음 렌더링도리 때, 그리고 category값이 바뀔 떄 요청하도록 설정해 줄수있다.\n  //       */\n  //       setArticles(response.data.articles);\n  //     } catch (e) {\n  //       console.log(e);\n  //     }\n  //     setLoading(false);\n  //   };\n  //   fetchData();\n  // }, [category]);\n\n  const [loading, response, error] = usePromise(() => {\n    // usePromise를 사용하면 NewsList에서 대기 중 상태 관리와 useEffect 설정을 직접 하지 않아도 되므로 코드가 훨씬 간결해진다.\n    // 요청 상태를 관리할 때 무조건 커스텀 Hook을 만들어서 사용해야 하는 것은 아니지만, 상황에 따라 적절히 사용하면 좋은 코드를 만들어 갈 수 있다.\n    const query = category === \"all\" ? \"\" : `&category=${category}`;\n    return axios.get(\n      `http://newsapi.org/v2/top-headlines?country=kr${query}&apiKey=f6e5e57285ad4b20aa02fdfe2d8b2905`\n    );\n  }, [category]);\n\n  // 대기 중일 떄\n  if (loading) {\n    return <NewsListBlock>대기 중...</NewsListBlock>;\n  }\n  // 아직 articles 값이 설정되지 않았을 때\n  // if (!articles) {\n  //   return null;\n  // }\n\n  // 아직 articles 값이 설정되지 않았을 때\n  if (!response) {\n    return null;\n  }\n  // 에러가 발행했을 때\n  if (error) {\n    return <NewsListBlock>에러발생!</NewsListBlock>;\n  }\n  // articles 값이 유효할 때\n  const { articles } = response.data;\n  return (\n    <NewsListBlock>\n      {/* NewsItem에서 title, urlToImage, url, description 을 article에 한번에 담아서 props전달  */}\n      {articles.map(article => (\n        <NewsItem key={article.url} article={article} />\n      ))}\n      {/*\n          데이터를 불러와서 뉴스 데이터 배열을 map 함수를 사용하여 컴포넌트 배열로 변환할 때 신경 써야 할 부분이 있다.\n          map 함수를 사용하기 전에 꼭 !artucles를 조회하여 해당 값이 현재 null이 아닌지 검사해야 한다.\n          이 작업을 하지 않으면, 아직 데이터가 없을떄 null에는 map 함수가 없기 떄문에 렌더링 과정에서 오류가 발생한다.\n          그래서 애플리케이션이 제대로 나타나지 않고 흰 페이지만 보이게 된다.\n      */}\n    </NewsListBlock>\n  );\n};\n\nexport default NewsList;\n","import { useEffect, useState } from \"react\";\n\nexport default function usePromise(promiseCreator, deps) {\n  // 대기 중/완료/실패에 대한 상태 관리\n  /*\n    프로젝트의 다양한 곳에서 사용될 수 있는 유틸 함수들은 보통 이렇게 src디렉터리에 lib 디렉터리를 만든 후 그 안에 작성한다.\n\n    방금만든 usePromise Hook은 Promise의 대기 중, 완료 결과, 실패 결과에 대한 상태를 관리하며, usePromise의 의존 배열 deps를 파라미터로 받아온다.\n    deps 배열은 usePromise 내부에서 사용한 useEffect의 의존 배열로 설정된다.\n    하지만 이 배열을 설정하는 부분에서 ESLint 경고가 나타난다.\n  */\n  const [loading, setLoading] = useState(false);\n  const [resolved, setResolved] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const process = async () => {\n      setLoading(true);\n      try {\n        const resolved = await promiseCreator();\n        setResolved(resolved);\n      } catch (e) {\n        setError(e);\n      }\n      setLoading(false);\n    };\n    process();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n\n  return [loading, resolved, error];\n}\n","import React from \"react\";\nimport Categories from \"../components/Categories\";\nimport NewsList from \"../components/NewsList\";\n\nconst NewsPage = ({ match }) => {\n  // 카테고리가 선택되지 않았으면 기본값 all로 사용\n  const category = match.params.category || \"all\";\n  return (\n    <>\n      <Categories />\n      <NewsList category={category} />\n    </>\n  );\n};\n\nexport default NewsPage;\n","import React from \"react\";\nimport { Route, HashRouter, Switch } from \"react-router-dom\";\nimport NewsPage from \"./pages/NewsPage\";\n// import Categories from \"./components/Categories\";\n// import NewsList from \"./components/NewsList\";\n\nconst App = () => {\n  // const [category, setCategory] = useState(\"all\"); // catecory 상태관리\n  // const onSelect = useCallback(category => setCategory(category), []); //catecory 값을 업데이트\n  return (\n    <>\n      {/* category와 onSelect 함수를 Categories 컴포넌트에게 props로 전달,  category값을 NewsList 컴포넌트에게도 전달*/}\n      {/* <Categories category={category} onSelect={onSelect} />\n      <NewsList category={category} /> */}\n      <HashRouter basename=\"/\">\n        <Switch>\n          <Route path=\"/:category?\" component={NewsPage} />\n        </Switch>\n      </HashRouter>\n      {/*\n        path에 /:category?와 같은 형태로 맨 뒤에 물음표 문자가 들어가 있다.\n        category값이 선택적(optional)이라는 의미.\n        즉 있을 수도 있고 없을 수도 있다 라는 뜻.\n        category URL 파라미터가 없다면 전체 카테고리를 선택한 것으로 간주.\n      */}\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}